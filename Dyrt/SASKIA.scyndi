// License:
// 	Dyrt/SASKIA.scyndi
// 	SASKIA = Serial Adventure Scripting Keeping Interface Advancements
// 	version: 25.07.01
// 
// 	Copyright (C) 2019, 2025 Jeroen P. Broks
// 
// 	This software is provided 'as-is', without any express or implied
// 	warranty.  In no event will the authors be held liable for any damages
// 	arising from the use of this software.
// 
// 	Permission is granted to anyone to use this software for any purpose,
// 	including commercial applications, and to alter it and redistribute it
// 	freely, subject to the following restrictions:
// 
// 	1. The origin of this software must not be misrepresented; you must not
// 	   claim that you wrote the original software. If you use this software
// 	   in a product, an acknowledgment in the product documentation would be
// 	   appreciated but is not required.
// 	2. Altered source versions must be plainly marked as such, and must not be
// 	   misrepresented as being the original software.
// 	3. This notice may not be removed or altered from any source distribution.
// End License

Module



// SASKIA = Serial Adventure Scripting Keeping Interface Advancements
// 
// SASKIA is a pretty simple scripter set up in NIL, meant to avoid 
// the woes of engines where callbacks are standard or even mandadory.
// 
// Now SASKIA has been written in NIL, but it should be easy to 
// translate the code to other scripting languages such as Lua (Duh, 
// since that is what NIL already does), squirrel and JavaScript (the
// latter in particular can be interesting.

// The Syntax may remind you of assembler, but it's not nearly as fast
// (On the contray actually, and therefore SASKIA should only be used
// to fake a serial approach to a callback-only environment).
// The syntax to ALL instructions is INSTRUNCTION Para1,para2,para3 etc.
// Please note it was not set up to be "turing-complete", as that should
// be taken up by the underlying programs.

// This line is set up for Bubble engines. When used in alternate engines
// you may need to alter the foldername a little bit.

#use "libs/sci/sys"
#use "libs/sci/sstring"

//#use "libs/strings"
#use "libs/stacker"
#use "libs/linkedlist"
#use "libs/datetime"

locExtern assert "assert"
locExtern saskiatimeout "true"
locExtern or "or"
locExtern and "and"
locExtern not "not"
locExtern _G "_G"
locExtern tonumber "tonumber"
locExtern debug "debug"

int _len(abc)
	// Very extremely dirty! Don't try at home if you don't know what you are doing!
	locExtern __ln "#"
	return __ln abc
end


//delegate SASKIA_CHAT
//delegate compile
locExtern compile "load"


var retval
//table instruction
table instructionstrue
//table instructionsmeta

void as_tmo()
	if saskiatimeout
		Now.AssertTimeOut()
	end
end


// Void routine
plua brutesplit(string str,string sep=" ")
	// Set up this way to make sure arrays keep starting on 1 -- saves trouble -- this time -- I hope. 
	return XSplit("Brute"..sep..str)
End

// No longer needed, and this doesn't even work in Scyndi
// Older versions of Lua use 'loadstring'. Newer versions use 'load'. I had to keep both possibilities in mind here!
//#pure
//compile = loadstring or load 
//#endpure


QuickMeta instruction
	NewIndex
	//instructionsmeta.__newindex = void()
		error("The instruction table is READ ONLY!")
	end

	Index
	//instructionsmeta.__index = var(t,string k)	
		return assert(instructionstrue[key],"SASKIA Instruction "..key.." doesn't exist")
	end
end	

//setmetatable(instruction,instructionsmeta)

QuickMeta ScynSasGet
	Index 
		//return _G[key] || Lua.Scyndi.AllIdentifiers[key]
		ret := Ternary(Lua.Scyndi.HasIdentifier(key),Lua.Scyndi.AllIdentifiers[key],_G[key])
		return ret
	End
	NewIndex
		//if _G[key]
		if !Lua.Scyndi.AllIdentifiers(key)
			CSayF("\x1b[91mWARNING!\x1b[96m\x07 %s-value '%s' written to pure Lua global '%s'",type(value),value,key)
			_G[key]=value
		else
			Lua.Scyndi.AllIdentifiers[key]=value
		end
	end
End

Init

ddef __CALL
	plua session
	plua params
	session,params=infinity
//instructionstrue.CALL = void (session,params)
	string f
	string d
	delegate ls
	f = params[1]
	d = "return Scyndi.Globals.ScynSasGet."..f .. "("
	for i,p in Lua.ipairs(params) 
		if i>1 and p!="" 
			if i>2 
				d = d ..", " 
			end
			d = d .. p
		end
	end
	d = d .. ")"
	//CWriteLine(d,180,255,0)
	//CSay(Infinity)
	//for k,v in pairs(params); print(k,v); end
	//CSayF("SASKIA CALL> %s",d)
	plua cs
	plua er
	//print(d)
	cs,er = compile(d,"SASKIA CALL")
	ls = assert(cs,sprintf("%s - SASKIA does: %s",er,d))
	retval = ls()
end
instructionstrue.CALL = __Call

ddef __JMP
//instructionstrue.JMP = void (session,label)
	plua session
	plua label
	session,label=infinity
	//var _script
	_script := session.parent_script
	assert(_script.labels[label[1]],"SASKIA: Label '"..tostring(label[1]).."' doesn't exist!")
	session.curline = _script.labels[label[1]] - 1
end
instructionstrue.JMP = __JMP
instructionstrue.JUMP = instructionstrue.JMP

//instructionstrue.CHK = void (session,para)
ddef __CHK
	plua session
	plua para
	session,para = infinity
	delegate ls
	assert(_len(para)>=2,"SASKIA: CHK requires at least two arguments!")
	if prefixed(para[1],"not ")
		ls = compile("return not( Scyndi.GLOBALS.ScynSasGet."..Right(para[1],len(para[1])-4)..")")
	else
		ls = compile("return Scyndi.GLOBALS.ScynSasGet."..para[1])
	end
	if !ls
		for i,v in pairs(para); print(i,v); end
		Lua.error("CHK script construction caused an error!")
	end
	if ls() 
		instructionstrue.JMP(session,{para[2]})
	end
end
instructionstrue.CHK = __CHK

ddef __MOV
//instructionstrue.MOV = void(session,para)
	plua session
	plua para
	session,para = infinity

	delegate ls
	CSayF("Moving value %s into variable %s",para[1],para[2]) // debug
	ls = assert(compile("Scyndi.GLOBALS.ScynSasGet."..para[2] .. " = "..para[1]))
	ls()
end
instructionstrue.MOV = __MOV

ddef __DEC
//instructionstrue.DEC = void(session,para)
	plua session
	plua para
	session,para = infinity

	delegate ls
	ls = assert(compile("Scyndi.GLOBALS.ScynSasGet."..para[1].." = Scyndi.GLOBALS.ScynSasGet."..para[1].." - "..(para[2] or "1")))
	ls()
end
instructionstrue.DEC = __DEC

ddef __INC
//instructionstrue.INC = void(session,para)
	plua session
	plua para
	session,para = infinity
	delegate ls
	ls = assert(compile("Scyndi.GLOBALS.ScynSasGet."..para[1].." = Scyndi.GLOBALS.ScynSasGet."..para[1].." + "..(para[2] or "1")))
	ls()
end
instructionstrue.INC = __INC

ddef __END
//instructionstrue["END"] = void(session)
	plua session
	plua para
	session,para = infinity
	session.running=false
end
instructionstrue["END"] = __END

ddef __GROUP
//instructionstrue.GROUP = void(session,para)
	plua session
	plua para
	session,para = infinity
	session.dontyield = tonumber(para[1] or 2)
end
instructionstrue["GROUP"] = __GROUP


ddef __RETURN
//instructionstrue["RETURN"] = void(session)
	plua session
	plua para
	session,para = infinity
	session.curline = session.insstack.Value
	if not session.curline
		session.running=false
	end
end
instructionstrue["RETURN"] = __RETURN

ddef __GOSUB
//instructionstrue.GOSUB = void(session,params)
	plua session
	plua params
	session,params = infinity

	session.insstack.Value = session.curline
	instruction.JMP(session,params)
end
instructionstrue.GOSUB = __GOSUB
CSay("SASKIA instruction set initiated!")
End

// Not sure what this is about, but likely my first debug setup before putting this into NALA
string DefaultLoadFunction(string filename)
	var f
	string content
	f = assert(io.open(filename, "rb"))
	//content = f:read("*all")
	content = f.read(f,"*all")
	//f:close()
	f.close(f) 
	// The : approach is NOT compatible with Scyndi
	return content
end	





//#pure
//local
//#endpure
class CL_SASINS
	string command
	table para
	
	CONSTRUCTOR(cmd,_para)
		//CSayF("Adding SASKIA instruction: %s (%s)",cmd,para)
		//for k,v in pairs(_para); CSayF("  %s -> %s",k,v) ; end
		self.command=cmd
		self.para = _para
	end
end

//#pure
//local
//#endpure
class CL_SESSION
	int curline = 0
	int dontyield = 0
	bool running = false
	var insstack
	var parent_script
	
	CONSTRUCTOR(_script,startlabel)
		startlabel = startlabel || ""
		Lua.assert(type(startlabel)=="string","String expected for startlabel")
		self.parent_script=_script
		//print("Testing!")		
		if startlabel 
			//printf("Testing! Testing! %s, %s\n",_script.labels,startlabel)
			//Lua.assert(_script.labels[startlabel],"Label '"..startlabel.."' not found! Cannot start session!\n"..debug.traceback())
			if (!_script.labels[startlabel])
				for k,i in spairs(_script.labels)
					print(k,i)
				end
			end
			Lua.assert(_script.labels[startlabel],"Label '"..startlabel.."' not found! Cannot start session!")
			//print("Testing! Testing! Testing!")
			self.curline = _script.labels[startlabel]
			//print("Testing! Testing! Testing! Testing!")
		end
		self.insstack = new Stack()
		self.parent_script = _script
	end
end

//#pure
//local
//#endpure

//#macro CL_SASKIA SASKIA
class CL_SASKIA
	table instr
	table labels
	static var sessions
	
	static delegate LoadFunction
	
	static var LoadScript(file)
		string _script
		_script = (CL_SASKIA.LoadFunction || DefaultLoadFunction)(file)
		//return new CL_SASKIA(_script)
		r:=new CL_SASKIA(_script)
		CSayF("SASKIA.LoadScript(\"%s\") will return (%s)%s",file,Lua.type(r),r)
		return r
	end
	
	void Parse(_script)
		self.labels = {}
		self.instr = {}
		table lines
		//lines = brutesplit(_script,"\n")
		lines = xsplit(_script,"\n")
		Now.StartTimeOut(10)
		//for i=1,_len(lines)
		for i=0,len(lines)-1
			as_tmo()
			//CSayF("Parsing line %d of %d",i+1,len(lines))
			lines[i] = Trim(lines[i])
			if Left(lines[i],1)==";" or (Trim(lines[i])=="")
				// Nothing at all here!
			elseif Left(lines[i],1)==":"
				self.labels[Right(lines[i],_len(lines[i])-1)] = _len(self.instr) + 1
				self.labels[Right(Upper(lines[i]),_len(lines[i])-1)] = _len(self.instr) + 1
			else
				string cmd
				table para
				int parap = 1
				int p=1
				int haakjes = 0
				bool reeks = false
				int timeout = 10000
				//while not (p>=#lines[i] or (Mid(lines[i],p,1)==" " and (not reeks)) or (Mid(lines[i],p,1)=="\t" and (not reeks)))
				while ! (p>=_len(lines[i]) || Mid(lines[i],p,1)==" " || Mid(lines[i],p,1)=="\t")
					as_tmo()
					p = p + 1
					timeout--
					assert(timeout>0,"TIMEOUT!") 
				end
				cmd = upper(trim(Left(lines[i],p)))
				p++
				// ------ CSayF("From line %d comes instruction %s (%s) (whitespace is on %d)",i,lines[i],cmd,p)
				while p<=_len(lines[i])
					//print(i+1,len(lines),p,len(lines[i]),parap,para[parap])
					as_tmo()
					para[parap] = para[parap] || ""
					//--CSayF("SASKIA DEBUG: %3d/%3d/%3d >> %s",i,p,parap,NIL.LuaSerialize('para',para))
					switch Mid(lines[i],p,1)
						case "\""
							para[parap] = para[parap] .. "\""
							reeks = not reeks
						case "("
							if ! reeks
								haakjes = haakjes + 1
							end
							para[parap] = para[parap] .. "("
						case ")"
							if ! reeks
								assert(haakjes>0,"unexpected ) in SASKIA script line #"..(i+1))							
								haakjes = haakjes - 1
							end
							para[parap] = para[parap] .. ")"
						case ","
							parap = parap + 1
							para [parap]=""
						default
							para[parap] = para[parap] .. Mid(lines[i],p,1)
					end
					p++
				end
				assert(haakjes == 0 and (not reeks),"Unexpected end of line #"..(i+1).." in SASKIA script")
				self.instr[_len(self.instr)+1] = new CL_SASINS(cmd,para)
				for i=1,_len(para) 
					para[i]=trim(para[i])
				end
			end
		end
		//Annoy("SASKIA SCRIPT PARSED!") // debug 
	end
		
	CONSTRUCTOR(string _script)
		self.Parse(_script)
		self.sessions = self.sessions || new TLinkedList()
	end
		
	void Start(string label)
		var s
		s = new CL_SESSION(self,label)
		s.running = true
		self.sessions.AddLast(s)
		//CSayF("Session begin at label \"%s\"; reference: %s; Open sessions: %d",label,tostring(s),self.sessions.Count)
		CSayF("SASKIA session started at label: %s",label)
	end
		
	static bool Cycle()
		bool ret
		ret = false
		//CWriteLine("SASKIA START CYCLE",255,255,0)
		//CSayF("Sessions %3d ",CL_SASKIA.sessions.Count)
		for ses,lnk in CL_SASKIA.sessions.Each
			ret = true
			//CSayF("Session: %s :Start",tostring(ses))
			if (! ses.running) || ses.curline>_len(ses.parent_script.instr)
				lnk.UnLink()
			else
				var ins
				//CWriteLine("Group NoYield start!",180,0,255)
				repeat
					//-- CSayF("SASKIA SESSION: %3d - %3d > %s",ses.curline,ses.dontyield,ses.instr[ses.curline])
					if ses.dontyield>0 
						ses.dontyield = ses.dontyield - 1 
					end
					ins = ses.parent_script.instr[ses.curline]
					//CSayF("SASKIA INSTRUCTION #%d (noyield %d) >> %s\n",ses.curline,ses.dontyield,ins[".dump"])
					//CSay(NIL.LuaSerialize(">> Parameters",ins.para))
					if ins
						instruction[ins.command](ses,ins.para)
					end
					ses.curline = ses.curline + 1
				until ses.dontyield<=0
			end
		end
		// Will return true, if an actual cycle took place, if none
		// took place sense no sessions were still running, it will
		// return false.
		return ret
	end
	
	static void Wipe()
		for ses,lnk in CL_SASKIA.sessions.Each
			ses.running=false
			// Should not really matter, but to make sure!
		end
		SASKIA.sessions.Clear()
	end
	
end

delegate Wipe
delegate Cycle
delegate LoadScript
Var      Sessions
//delegate Start
Init
	CL_SASKIA.Sessions = new TLinkedList()
	Wipe       = CL_SASKIA.Wipe
	Cycle      = CL_SASKIA.Cycle
	LoadScript = CL_SASKIA.LoadScript
	Sessions   = CL_SASKIA.Sessions
	//Start      = CL_SASKIA.Start
End


//#pure
//return CL_SASKIA
//#endpure
