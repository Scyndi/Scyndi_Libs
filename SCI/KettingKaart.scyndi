// License:
// 	SCI/KettingKaart.scyndi
// 	Kettingkaart (Chained Map)
// 	version: 25.07.01
// 
// 	Copyright (C) 2020, 2025 Jeroen P. Broks
// 
// 	This software is provided 'as-is', without any express or implied
// 	warranty.  In no event will the authors be held liable for any damages
// 	arising from the use of this software.
// 
// 	Permission is granted to anyone to use this software for any purpose,
// 	including commercial applications, and to alter it and redistribute it
// 	freely, subject to the following restrictions:
// 
// 	1. The origin of this software must not be misrepresented; you must not
// 	   claim that you wrote the original software. If you use this software
// 	   in a product, an acknowledgment in the product documentation would be
// 	   appreciated but is not required.
// 	2. Altered source versions must be plainly marked as such, and must not be
// 	   misrepresented as being the original software.
// 	3. This notice may not be removed or altered from any source distribution.
// End License
// License Information:
// KettingKaart.nlb/KettingKaart.nil
// KettingKaart
// version: 19.12.30
// Copyright (C)  Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Module

#use "Libs/SCI/Sys"
#use "Libs/SCI/Kthura"
#use "Libs/SCI/SString"

void Chainer(kth,gtl,string naar,string van)
	CSayF("= Requested chain to '%s', from '%s'",naar,van)
	gtl(naar,"From_"..van)
end

//module m_KettingKaart
	
	delegate ZA_Enter
	delegate GoToLayer
	int TLen = 3
	string prefix = "#"
	
	//void CONSTRUCTOR()
	//end
	
	void SetUp(kth)
		assert(ZA_Enter ,"You cannot init KettingKaart without setting KettingKaart.ZA_Enter to a delegate function << void(string,function) >> first")
		assert(GoToLayer,"You cannot init KettingKaart without setting KettingKaart.GoToLayer to a delegate function << void(string,string) >> first")
		var OldLay
		OldLay = kthura.CurrentLayer
		for Lay in Kthura.Layers.Each		
			CSayF("= Chains on Layer %s",Lay)
			kthura.CurrentLayer = Lay
			For Tag in Each(Kthura.TagList)
				if prefixed(Upper(Tag),"CHAIN_")
					CSay("KettingKaart (On layer: "..Lay..": "..Tag.." => "..prefix..right(Tag,TLen).."."..right(Lay,TLen))
					//ZA_Enter(Tag,Chainer,kth,GoToLayer,prefix..right(Tag,TLen),right(Lay,TLen))
					f:=Lua.load(sprintf("Scyndi.Class.KettingKaart.Chainer(nil,Scyndi.Class.KettingKaart.GoToLayer,\"%s\",\"%s\")",prefix..right(Tag,TLen),right(Lay,TLen)))
					Lua.assert(f)
					ZA_Enter(Tag,f)
				end
			end
		end
	end

//end
